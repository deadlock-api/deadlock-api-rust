name: Rust CI/CD

on:
  push:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag to push (e.g., v1.0.0, specific-feature)'
        required: true
        type: string

env:
  RUST_TOOLCHAIN: stable
  CARGO_TERM_COLOR: always
  DEPOT_PROJECT_ID: k7kl7zsmcs
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CARGO_INCREMENTAL: 0

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Install Protocol Buffers compiler
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler libprotobuf-dev
          version: 1.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Set up Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-rust-${{ env.RUST_TOOLCHAIN }}

      - name: Build project
        run: cargo build

  lint:
    name: Lint
    runs-on: ubuntu-24.04-arm
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Install Protocol Buffers compiler
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler libprotobuf-dev
          version: 1.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      - name: Set up Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-rust-${{ env.RUST_TOOLCHAIN }}

      - name: Setup go-task
        run: curl -sSf https://taskfile.dev/install.sh | sh -s -- -b $HOME/.local/bin

      - name: Lint code (cargo clippy)
        run: task lint

  test:
    name: Test
    runs-on: ubuntu-24.04-arm
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Install Protocol Buffers compiler
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler libprotobuf-dev
          version: 1.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Set up Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-rust-${{ env.RUST_TOOLCHAIN }}

      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Setup go-task
        run: curl -sSf https://taskfile.dev/install.sh | sh -s -- -b $HOME/.local/bin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Depot
        uses: depot/setup-action@v1

      - name: Build and load
        uses: depot/build-push-action@v1
        with:
          project: ${{ env.DEPOT_PROJECT_ID }}
          platforms: linux/arm64
          context: .
          file: Dockerfile.testing
          tags: deadlock-api-rust:testing
          load: true
          push: false

      - name: Run tests
        run: NO_BUILD=1 task coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true

  deploy:
    name: Deploy
    runs-on: ubuntu-24.04-arm
    needs: [ lint, test ]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Determine Docker Tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "DOCKER_TAG=${{ inputs.tag }}" >> $GITHUB_ENV
          else # Must be push to main
            echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          fi
          echo "Using Docker tag: $DOCKER_TAG"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Depot
        uses: depot/setup-action@v1

      - name: Build and Push Docker image
        uses: depot/build-push-action@v1
        with:
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          project: ${{ env.DEPOT_PROJECT_ID }}
